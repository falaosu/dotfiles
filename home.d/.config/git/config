# ~/.gitconfig: Git per-user settings
# *****************************************************************************
# * Use "#" or ";" character to comment.
# * Use GIT_TRACE=1 to enables general trace messages, e.g. alias expansion,
#   built-in command execution and external command execution.
# * Use ~/.config/git/config.local to store your personal settings. Please do NOT
#   write those directly here or open a pull request if you want.
# *****************************************************************************
[alias]
	cl = clone
	cld = clone --depth
	cl1 = cld 1
	root = rev-parse --show-toplevel
	parent = cat-file -p
	# Fetch only one tag from remote
	# usage:    git fetch-tag 2.4.0
	fetch-tag = "!f() { git fetch --depth=1 --no-tags origin \"refs/tags/$1:refs/tags/$1\"; }; f"
	fetch-tag-force = "!f() { git fetch --depth=1 --no-tags origin \"+refs/tags/$1:refs/tags/$1\"; }; f"
	# Emulate bash alias
	alias = "!f() { git config alias.\"$@\"; }; f"
	remotes = "remote -v"
	stale = "remote prune"
	# usage: git co master; git chkconflict | sh -xs
	chkconflict = "for-each-ref --shell --format='git merge --no-ff --no-commit %(refname); git merge --abort' refs/heads"
	conflicts = diff --name-only --diff-filter=U
	touch = "!f() { git ls-files -z \"*.$1\" | xargs -0 touch; }; f"

	# -- Basic  ---------------------------------------------------------------
	addu = add --update
	addp = add --patch
	st = status
	sts = st --short --branch
	df = diff
	#dfm = df --color-moved=plain
	dfi = df --ignore-all-space
	dfc = df --cached  # --staged is a synonym of --cached
	dfci = dfc --ignore-all-space
	dfu = diff @{upstream}
	dfui = dfi @{upstream}
	ci = commit
	cir = ci --reuse-message=HEAD
	cip = ci --patch
	cis = ci --signoff
	cig = ci --gpg-sign
	# Amend the currently staged files to the latest commit
	# or commit --amend --date=""
	# or commit --amend --reset-author
	# but authorship of the resulting commit now belongs of
	# the committer, also it renews the author timestamp.
	amend = ci --amend --date=now        # as of v2.1.4
	amendn = amend --no-edit                 # as of v2.1.4
	unstage = reset HEAD
	forget = rm --cache
	showi = show --ignore-all-space

	# -- Branching, Merging and Patching --------------------------------------
	br = branch
	brv = br -avv
	co = checkout
	restore = co --
	author = shortlog --summary --numbered
	committer = author --committer           # as of v2.12 2017-02-24
	lc = log ORIG_HEAD.. --stat --no-merges  # See the fetched commits
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	lgu = lg @{upstream}..
	logg = log --graph --decorate --oneline --abbrev-commit --all
	lgf = log --pretty=full                  # Display additional committer name
	lgc = lgf --committer                    # Limit the commits output to match the specified committer
	history = log --follow --                # Show commit history of filename
	stats = log -10 --dirstat=files,1,cumulative --ignore-blank-lines --abbrev-commit --oneline --graph --decorate
	# what new commits have been created by the last command - typically after a "git pull"
	# Invoke with:
	#     git new HEAD
	# or maybe use
	#     git whatchanged ..origin
	# or:
	#    git fetch && git log ..origin/master
	#new = "!f() { git log \"$1\"@{1}.. ; }; f"
	new = "log @{1}.."
	tags = tag --sort=-creatordate  # as of v2.7 2015-09-11

	# -- Sharing and Updating Projects ----------------------------------------
	#pullr = pull --rebase
	pull1 = pull --depth=1 # pull right after clone
	pullb = "!f() { \
		UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}'); \
		BRANCH=$(echo \"${UPSTREAM}\" | cut -f2- -d/); \
		UPSTREAM=$(echo \"${UPSTREAM}\" | cut -f1 -d/); \
		git pull \"$@\" \"${UPSTREAM}\" \"${BRANCH}\"; \
	}; f"
	pr = "!f() { git fetch -fu \"${2:-upstream}\" +refs/pull/\"${1}\"/head:refs/remotes/\"${2:-upstream}\"/pr/\"${1}\"; }; f"
	pushf = push --force-with-lease
	ma = merge --abort
	mc = merge --continue
	rb = rebase # --ignore-date
	rba = rb --abort
	rbc = rb --continue
	rbi = rb --interactive
	rbs = rb --skip
	rbroot = rb --root
	rbiroot = rbi --root
	cp = cherry-pick
	cpa = cp --abort
	cpc = cp --continue
	# Add a subtree to your git project
	sba = "!f() { git subtree add --prefix \"$2\" \"$1\" master --squash; }; f"

	# -- Administration -------------------------------------------------------
	# Remove sensitive data from history, after a push
	rm-sensitive = "!f() { \
		git filter-branch \
			--force \
			--index-filter 'git rm --cached --ignore-unmatch -r '"\"$1\"" \
			--prune-empty \
			--tag-name-filter \
			cat \
			-- \
			--all; \
	}; f"
	# After some time has passed and you're confident that
	# git filter-branch had no unintended side effects, you can
	# force all objects in your local repository to be dereferenced
	# and garbage collected (Git 1.8.5+)
	clean-up = "!f() { \
		git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin; \
		git reflog expire --expire=now --all; \
		git gc --prune=now; \
	}; f"
[color]
	ui = auto
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[core]
	# set line-ending behavior
	autocrlf = input
	editor = vim
	#editor = subl --wait
	# Don't trust file modes, useful on Windows or sharable storage.
	filemode = false
	pager = less -F -R -X
[diff]
	tool = vimdiff
	algorithm = histogram
[difftool]
	prompt = false
[merge]
	tool = vimdiff
[push]
	# Push only the current branch
	# more https://stackoverflow.com/a/21865319/5456794
	default = current
[pull]
	rebase = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[credential]
	helper = cache --timeout=3600
[grep]
	lineNumber = true
	extendedRegexp = true

# -- Include personal settings ------------------------------------------------

[include]
	# Include private information about user.user and user.email
	path = ~/.config/git/config.local
