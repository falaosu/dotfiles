#!/usr/bin/env git
# ~/.gitconfig
# ************************************************************************
# This is the config file, and a '#' or ';' character indicates a comment.
#
# Use GIT_TRACE=1 to enables general trace messages, e.g. alias expansion,
# built-in command execution and external command execution.
# ************************************************************************
#
# USE ~/.gitconfig.local to store your personal settings. Please do NOT
# write those directly here or open a pull request if you want.

[alias]
	# -- Branch --------------------------------------------------------------------
	br = branch

	# -- Clone ---------------------------------------------------------------------
	cl = clone
	cl1 = clone --depth 1

	# -- Commit --------------------------------------------------------------------
	ci = commit
	cis = commit --signoff
	cig = commit --gpg-sign
	amend = commit --amend  # Amend the currently staged files to the latest commit

	# -- Checkout ------------------------------------------------------------------
	co = checkout

	# -- Diff ----------------------------------------------------------------------
	df = diff
	#dfm = diff --color-moved=plain
	#dfc = diff --cached       # Equivalent to below command
	dfs = diff --staged

	# -- Log -----------------------------------------------------------------------
	lc = log ORIG_HEAD.. --stat --no-merges  # See the fetched commits
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	logg = log --graph --decorate --oneline --abbrev-commit --all
	lgf = log --pretty=full                  # Display additional committer name
	lgc = log --pretty=full --committer      # Limit the commits output to match the specified committer
	history = log --follow --                # Show commit history of filename
	stats = log -10 --dirstat=files,1,cumulative --ignore-blank-lines --abbrev-commit --oneline --graph --decorate
	# what new commits have been created by the last command - typically after a "git pull"
	# Invoke with:
	#     git new HEAD
	# or maybe use
	#     git whatchanged ..origin
	# or:
	#    git fetch && git log ..origin/master
	new = "!f() { git log \"${1}\"@{1}.. ; }; f"

	# -- Filter-branch -------------------------------------------------------------
	# Remove sensitive data from history, after a push
	rm-sensitive = "!r() { git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch '"\"$1\"" --prune-empty --tag-name-filter cat -- --all; }; r"
	# After some time has passed and you're confident that git filter-branch had no unintended side effects,
	# you can force all objects in your local repository to be dereferenced and garbage collected (Git 1.8.5+)
	clean-up = "!f() { git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin; git reflog expire --expire=now --all; git gc --prune=now; }; f"

	# -- Pull ----------------------------------------------------------------------
	#pl = pull
	#pb = pull --rebase

	# -- Push ----------------------------------------------------------------------
	#ps = push                 # Update remote refs along with associated objects
	#psf = push --force        # Overwrite remote refs with local associated objects
	#psu = push --set-upstream # Add upstream (tracking) reference
	#pst = push --tags         # Push all refs under refs/tags

	# -- Rebase --------------------------------------------------------------------
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip

	# -- Utils ---------------------------------------------------------------------
	forget = rm --cache
	pr = prune --verbose      # Prune all unreachable objects from the object database
	root = rev-parse --show-toplevel
	author = shortlog --summary --numbered
	committer = shortlog -summary --numbered --committer # Git 2.12 (Q1 2017)
	st = status
	# Add a subtree to your git project
	sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
[color]
	ui = auto
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[core]
	# set line-ending behavior
	autocrlf = input
	editor = vim
	#editor = subl --wait
	; Don't trust file modes, useful on Windows or sharable storage.
	filemode = false
	pager = less -F -X
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[merge]
	tool = vimdiff
[push]
	# Push only the current branch
	# more https://stackoverflow.com/a/21865319/5456794
	default = simple
[pull]
	rebase = true

# -- Include personal settings ------------------------------------------------

[include]
	# Include private information about user.user and user.email
	path = ~/.gitconfig.local
